---
interface Props {
	subServices?: string[];
}

import SectionHead from "@/layouts/SectionHead.astro";
import { cn, toRoman } from "@/lib/utils";

const { subServices } = Astro.props;

const isBahasa = Astro.locals.paraglide.lang === "id";
---

<section class="serviceSection relative w-full">
	<SectionHead class="w-full bg-background !~py-4/12">
		<span
			slot="label"
			class={cn(
				"serviceLabel inline-block w-[30px] text-muted-foreground transition-all duration-500 ease-in md:w-auto",
				!isBahasa && "lg:w-0",
				isBahasa && "xl:w-0",
			)}>
			<slot name="label" class="text-base" />
		</span>
		<span
			slot="title"
			class={cn(
				"serviceSectionHeader block text-base uppercase md:text-lg",
				!isBahasa && "lg:mt-2",
				isBahasa && "xl:mt-2",
			)}>
			<slot name="title" />
		</span>
		<div
			slot="description"
			class={cn(
				"flex flex-col gap-3 pt-3 md:pt-4",
				!isBahasa && "lg:gap-5 lg:pt-0",
				isBahasa && "xl:gap-5 xl:pt-0",
			)}>
			<h3
				class="colorSubheader flex max-w-[500px] flex-1 text-sm leading-[1.4] text-primary md:text-base md:leading-[1.8]">
				<slot name="subheader" />
			</h3>
			<div class="serviceContent">
				<slot name="description" />
				{
					subServices && (
						<ul class="serviceSectionSub grid grid-cols-[min-content_1fr] divide-y divide-muted-foreground/50 pt-3 text-primary md:pt-4">
							{subServices.map((subService, index) => (
								<li class="col-span-2 grid grid-cols-[0px_1fr] gap-6 py-2 md:gap-8 md:py-4">
									<span class="whitespace-nowrap text-sm md:text-base">
										{toRoman(index + 1)}
									</span>
									<span class="text-sm md:text-base">{subService}</span>
								</li>
							))}
						</ul>
					)
				}
			</div>
		</div>
	</SectionHead>
</section>
<style is:global>
	.serviceLabelActive {
		@apply text-primary before:content-['/'] after:content-['/'];
	}
	#serviceSectionContainer {
		--negative-top: 0px;
		--scrollaway-top: 0px;
	}
	.serviceSection {
		--self-offset: 0px;
	}

	.serviceSection > .sectionHead {
		position: sticky;
		top: calc(var(--self-offset) - var(--negative-top) - var(--scrollaway-top));
	}
</style>
<script>
	import { darkColors } from "@/lib/utils";
	import gsap from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";
	gsap.registerPlugin(ScrollTrigger);

	const colorSubheader = gsap.utils.toArray(".colorSubheader") as HTMLElement[];
	const shuffledDarkColor = gsap.utils.shuffle(darkColors);
	const expandedArray = Array(
		Math.ceil(colorSubheader.length / shuffledDarkColor.length),
	)
		.fill(shuffledDarkColor)
		.flat();
	for (let i = 0; i < colorSubheader.length; i++) {
		gsap.to(colorSubheader[i], {
			color: expandedArray[i],
			duration: 0.5,
			ease: "power.out",
		});
	}

	const container = document.getElementById("serviceSectionContainer");
	const serviceLabel = gsap.utils.toArray(".serviceLabel") as HTMLElement[];
	const serviceSection = gsap.utils.toArray(".serviceSection") as HTMLElement[];
	const sectionHead = gsap.utils.toArray(
		".serviceSection>.sectionHead",
	) as HTMLElement[];
	const serviceSectionHeader = gsap.utils.toArray(
		".serviceSectionHeader",
	) as HTMLElement[];
	const serviceSectionContainer = document.getElementById(
		"serviceSectionContainer",
	) as HTMLElement | null;
	const lastBorder = sectionHead[sectionHead.length - 1] as HTMLElement | null;
	lastBorder!.style.borderBottomWidth = "1px";
	serviceLabel[0].classList.add("serviceLabelActive");

	const negativeOffset = window.innerWidth >= 1280 ? 60 : 0;
	const padding =
		parseFloat(getComputedStyle(lastBorder!).paddingTop) +
		parseFloat(getComputedStyle(lastBorder!).paddingBottom);

	const displayingArray = [] as number[];
	const heightArray = [] as number[];
	const finalPos = [0] as number[];
	let sum = 0;
	for (let i = 0; i < serviceSection.length - 1; i++) {
		const serviceContent = serviceSection[i].querySelector(
			".serviceContent",
		) as HTMLElement | null;
		if (serviceContent) {
			gsap.to(serviceContent, {
				autoAlpha: 0,
				scrollTrigger: {
					trigger: container,
					start: `top+=${heightArray.reduce((prev, cur) => prev + cur, 0) - sum + serviceContent.offsetHeight * 0.3} top`,
					end: `+=${sum + serviceContent.offsetHeight * 0.7}`,
					// markers: true,
					id: `serviceContent${i}`,
					scrub: 1,
					invalidateOnRefresh: false,
					onEnter: () => {
						serviceLabel[i + 1]?.classList.add("serviceLabelActive");
				serviceLabel[i]?.classList.remove("serviceLabelActive");
					},
					onLeaveBack: () => {
						serviceLabel[i]?.classList.add("serviceLabelActive");
				serviceLabel[i + 1]?.classList.remove("serviceLabelActive");
					},
				},
				ease: "power2.out",
			});
		}
		const contentHeight = serviceSectionHeader[i].offsetHeight;
		heightArray.push(sectionHead[i].offsetHeight);
		displayingArray.push(padding + contentHeight + 1);
		sum += displayingArray[i];
		if (serviceSection[i + 1])
			serviceSection[i + 1].style.setProperty("--self-offset", `${sum}px`);
	}

	const globalSectionHead = document.querySelector(".sectionHead") as HTMLElement;
	const sectionHeadPaddingTop = parseFloat(getComputedStyle(globalSectionHead).paddingTop);
	let lastChildHeight = Math.max(...heightArray) - sum;
	const lastChild = container?.lastElementChild as HTMLElement | null;
	const extraHeight = lastChildHeight - (lastChild?.offsetHeight ?? 0);
	if (extraHeight < sectionHeadPaddingTop)
		lastChildHeight += sectionHeadPaddingTop - extraHeight;
	gsap.set(serviceSection, {
		height: lastChildHeight
	})

	heightArray.push(lastChildHeight);
	serviceSectionContainer!.style.height = `${heightArray.reduce((prev, cur) => prev + cur, 0)}px`;
	for (let i = 0; i < serviceSection.length; i++) {
		serviceSection[i].style.position = "absolute";
		serviceSection[i].style.bottom = "0";
		serviceSection[i].style.right = "0";
		serviceSection[i].style.height =
			`${heightArray.slice(i).reduce((prev, cur) => prev + cur, 0)}px`;
	}
	for (let i = sectionHead.length - 2; i >= 0; i--) {
		finalPos.push(
			sectionHead[i].offsetHeight -
				displayingArray[i] +
				(finalPos[finalPos.length - 1] ?? 0),
		);
	}

	ScrollTrigger.create({
		trigger: container,
		start: "top top",
		endTrigger: container?.lastElementChild,
		end: `top top+=${sum - negativeOffset}`,
		onUpdate: (self) => {
			container?.style.setProperty(
				"--negative-top",
				`${self.progress * negativeOffset}px`,
			);
		},
		invalidateOnRefresh: false,
	});

	ScrollTrigger.create({
		endTrigger: container,
		end: "bottom top",
		trigger: container?.lastElementChild,
		start: `top top+=${sum - negativeOffset - 4}`,
		invalidateOnRefresh: false,
		// markers: true,
		onEnter: () => {
			for (let i = 0; i < sectionHead.length; i++) {
				sectionHead[i].style.position = "absolute";
				sectionHead[i].style.top = `${finalPos[sectionHead.length - 1 - i] + 4}px`;
			}
		},
		onLeaveBack: () => {
			for (let i = 0; i < sectionHead.length; i++) {
				sectionHead[i].style.position = "sticky";
				sectionHead[i].style.top =
					`calc(var(--self-offset) - var(--negative-top) - var(--scrollaway-top))`;
			}
		},
	});

	window.serviceSectionReady = true;
</script>
